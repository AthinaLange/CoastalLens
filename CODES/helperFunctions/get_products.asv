% GET PRODUCT DATA FROM R

for dd = 1 : length(data_files)
    clearvars -except dd *_dir user_email data_files P
    cd(fullfile(data_files(dd).folder, data_files(dd).name))

    load(fullfile(data_files(dd).folder, data_files(dd).name, 'input_data.mat'))

    ids_grid = find(contains(extractfield(Products, 'type'), 'Grid'));
    ids_xtransect = find(contains(extractfield(Products, 'type'), 'xTransect'));
    ids_ytransect = find(contains(extractfield(Products, 'type'), 'yTransect'));


    % repeat for each flight
    for ff = 1 : length(flights)

        load(fullfile(data_files(dd).folder, data_files(dd).name, 'input_data.mat'), 'Products')
        odir = fullfile(flights(ff).folder, flights(ff).name);
        oname = [data_files(dd).name '_' flights(ff).name];
        cd(odir)

        for hh = 1 : length(extract_Hz)
            imageDirectory = sprintf('images_%iHz', extract_Hz(hh));
            images = imageDatastore(imageDirectory);

            load(fullfile(odir, 'Processed_data', [oname '_IOEOInitial']),'worldPose')
            load(fullfile(odir, 'Processed_data', [oname '_IOEOVariable']),'ind_scp_method')
            if ind_scp_method == 1 % Using Feature Detection/Matching
                load(fullfile(odir, 'Processed_data', [oname '_IOEOInitial']),'worldPose', 'extrinsics', 'intrinsics_CIRN')
                load(fullfile(odir, 'Processed_data', [oname '_IOEOVariable_' char(string(extract_Hz(hh))) 'Hz' ]),'R','intrinsics')
                images.Files(length(R.FullRate_OGFrame)+1:end)=[];
                if class(R.FullRate_OGFrame) == 'rigidtform2d' % do 2D rotation
                    %% ===========================2D rotation ==================================
                    for viewId = 1:length(images.Files)
                        viewId
                        I = undistortImage(readimage(images, viewId), intrinsics);
                        correction = R.FullRate_OGFrame(viewId);
                        I_corrected = imwarp(I, correction, OutputView=imref2d(size(I)));
                        for pp = 1:length(Products)
                            if rem(extract_Hz(hh),Products(pp).frameRate) == 0 % check if at correct extraction rate
                                if extract_Hz(hh) ~= Products(pp).frameRate  && rem(viewId-1, extract_Hz(hh)/Products(pp).frameRate)==0% if subsampled framerate
                                    if worldPose.Translation ~= [0 0 0] % can do this - otherwise use CIRN extrinsics
                                        [xyz, Xout, Yout, Z] = getCoords(Products, pp, extrinsics);
                                        Products(pp).localX = Xout;
                                        Products(pp).localY = Yout;
                                        Products(pp).localZ = Z;
                                        iP = round(world2img(xyz, pose2extr(worldPose), intrinsics));

                                        clear Irgb_temp
                                        for ii = 1:length(xyz)
                                            if any(iP(ii,:) <= 0) || any(iP(ii,[2 1]) >= intrinsics.ImageSize)
                                                Irgb_temp(ii, :) = uint8([0 0 0]);
                                            else
                                                Irgb_temp(ii, :) = I_corrected(iP(ii,2), iP(ii,1),:);
                                            end
                                        end

                                        if contains(Products(pp).type, 'Grid')
                                            Products(pp).Irgb(viewId, :,:,:) = reshape(Irgb_temp, size(Xout,1), size(Xout,2), 3);
                                        else
                                            Products(pp).Irgb(viewId, :,:) = Irgb_temp;
                                        end
                                    else % use CIRN extrinsics
                                        [IrIndv, Xout, Yout, Z] = getPixels(Products, pp, extrinsics, intrinsics_CIRN, I_corrected);
                                        Products(pp).localX = Xout;
                                        Products(pp).localY = Yout;
                                        Products(pp).localZ = Z;
                                        if contains(Products(pp).type, 'Grid')
                                            Products(pp).Irgb(viewId, :,:,:) = IrIndv;
                                        else
                                            Products(pp).Irgb(viewId, :,:) = permute(IrIndv,[2 1 3]);
                                        end
                                    end % if worldPose.Translation ~= [0 0 0]
                                end % if extract_Hz(hh) ~= Products(pp).frameRate  && rem(viewId-1, extract_Hz(hh)/Products(pp).frameRate)==0% if subsampled framerate
                            end % if rem(extract_Hz(hh),Products(pp).frameRate) == 0

                        end % for pp = 1:length(Products)
                    end % for viewId = 1:length(images.Files)

                elseif class(R.FullRate_OGFrame) == 'rigidtform3d' % do 2D rotation
                    %% ===========================3D rotation ==================================
                    for viewId = 1:length(images.Files)
                        viewId
                        I = undistortImage(readimage(images, viewId), intrinsics);
                        for pp = 1:length(Products)
                            if rem(extract_Hz(hh),Products(pp).frameRate) == 0
                                if extract_Hz(hh) ~= Products(pp).frameRate  && rem(viewId-1, extract_Hz(hh)/Products(pp).frameRate)==0% if subsampled framerate

                                    if worldPose.Translation ~= [0 0 0] % can do this - otherwise use CIRN extrinsics
                                        [xyz, Xout, Yout, Z] = getCoords(Products, pp, extrinsics);

                                        Products(pp).localX = Xout;
                                        Products(pp).localY = Yout;
                                        Products(pp).localZ = Z;
                                        iP = round(world2img(xyz, pose2extr(R.FullRate_OGFrame(viewId)), intrinsics));

                                        clear Irgb_temp
                                        for ii = 1:length(xyz)
                                            if any(iP(ii,:) <= 0) || any(iP(ii,[2 1]) >= intrinsics.ImageSize)
                                                Irgb_temp(ii, :) = uint8([0 0 0]);
                                            else
                                                Irgb_temp(ii, :) = I(iP(ii,2), iP(ii,1),:);
                                            end
                                        end

                                        if contains(Products(pp).type, 'Grid')
                                            Products(pp).Irgb(viewId, :,:,:) = reshape(Irgb_temp, size(Xout,1), size(Xout,2), 3);
                                        else
                                            Products(pp).Irgb(viewId, :,:) = Irgb_temp;
                                        end
                                    else % use CIRN extrinsics
                                        disp('REQUIRES WORLDPOSE')
                                    end % if worldPose.Translation ~= [0 0 0]
                                end % if extract_Hz(hh) ~= Products(pp).frameRate  && rem(viewId-1, extract_Hz(hh)/Products(pp).frameRate)==0% if subsampled framerate
                            end % if rem(extract_Hz(hh),Products(pp).frameRate) == 0
                        end % for pp = 1:length(Products)
                    end % for viewId = 1:length(images.Files)
                end % if contains(R.rot_answer, '2D')

            elseif ind_scp_method == 2 % SCPs
                %% =========================== SCPs ==================================
                load(fullfile(odir, 'Processed_data', [oname '_IOEOVariable_SCP_' char(string(extract_Hz(hh))) 'Hz' ]),'extrinsics','intrinsics_CIRN')
                for viewId = 1:length(images.Files)
                    viewId
                    I = readimage(images, viewId);
                    for pp = 1:length(Products)
                        if rem(extract_Hz(hh),Products(pp).frameRate) == 0
                            if extract_Hz(hh) ~= Products(pp).frameRate  && rem(viewId-1, extract_Hz(hh)/Products(pp).frameRate)==0% if subsampled framerate

                                [IrIndv, Xout, Yout, Z] = getPixels(Products, pp, extrinsics(viewId,:), intrinsics_CIRN, I);
                                Products(pp).localX = Xout;
                                Products(pp).localY = Yout;
                                Products(pp).localZ = Z;
                                if contains(Products(pp).type, 'Grid')
                                    Products(pp).Irgb(viewId, :,:,:) = IrIndv;
                                else
                                    Products(pp).Irgb(viewId, :,:) = permute(IrIndv,[2 1 3]);
                                end
                            end % if extract_Hz(hh) ~= Products(pp).frameRate  && rem(viewId-1, extract_Hz(hh)/Products(pp).frameRate)==0% if subsampled framerate
                        end % if rem(extract_Hz(hh),Products(pp).frameRate) == 0
                    end % for pp = 1:length(Products)
                end %  for viewId = 1:length(images.Files)


            end % if ind_scp_method == 1 % Using Feature Detection/Matching

            save(fullfile(odir, 'Processed_data', [oname '_Products_' char(string(extract_Hz(hh))) 'Hz' ]),'Products', '-v7.3')
        end % for hh = 1 : length(extract_Hz)
    end % for ff = 1 : length(flights)
end % for dd = 1 : length(data_files)
clearvars -except *_dir user_email data_files
cd(global_dir)

%%
%% FUNCTIONS
function [IrIndv, Xout, Yout, Z] = getPixels(Products, pp, extrinsics, intrinsics_CIRN, I)

[y2,x2, ~] = ll_to_utm(Products(pp).lat, Products(pp).lon);
localExtrinsics = localTransformExtrinsics([x2 y2], 270-Products(pp).angle, 1, extrinsics);


if contains(Products(pp).type, 'Grid')
    if Products(pp).xlim(1) < 0; Products(pp).xlim(1) = -Products(pp).xlim(1); end
    ixlim = x2 - Products(pp).xlim;

    if Products(pp).ylim(1) > 0; Products(pp).ylim(1) = -Products(pp).ylim(1); end
    if Products(pp).ylim(2) < 0; Products(pp).ylim(2) = -Products(pp).ylim(2); end
    iylim = y2 + Products(pp).ylim;

    [iX, iY]=meshgrid(ixlim(1):Products(pp).dx:ixlim(2),iylim(1):Products(pp).dy:iylim(2));

    % DEM stuff
    if isempty(Products(pp).z); iz=0; else; iz = Products(pp).z; end
    iZ=iX*0+iz;

    X=iX; Y=iY; Z=iZ;
    [ Xout, Yout]= localTransformPoints([x2 y2], 270-Products(pp).angle,1,X,Y);
    Z=Xout*0+iz;
    xyz = cat(2,Xout(:), Yout(:), Z(:));

elseif contains(Products(pp).type, 'xTransect')
    if Products(pp).xlim(1) < 0; Products(pp).xlim(1) = -Products(pp).xlim(1); end
    ixlim = x2 - Products(pp).xlim;
    iy = y2 + Products(pp).y;

    X = [ixlim(1):Products(pp).dx:ixlim(2)]';
    Y = X.*0+iy;
    if isempty(Products(pp).z); iz=0; else; iz = Products(pp).z; end
    Z = X.*0 + iz;
    [ Xout, Yout]= localTransformPoints([x2 y2], 270-Products(pp).angle,1,X,Y);
    xyz = cat(2,Xout(:), Yout(:), Z(:));
elseif contains(Products(pp).type, 'yTransect')
    if Products(pp).ylim(1) > 0; Products(pp).ylim(1) = -Products(pp).ylim(1); end
    if Products(pp).ylim(2) < 0; Products(pp).ylim(2) = -Products(pp).ylim(2); end
    iylim = y2 + Products(pp).ylim;

    ix = x2 + Products(pp).x;

    Y = [iylim(1):Products(pp).dy:iylim(2)]';
    X = Y.*0+ix;
    if isempty(Products(pp).z); iz=0; else; iz = Products(pp).z; end
    Z = Y.*0 + iz;
    [ Xout, Yout]= localTransformPoints([x2 y2], 270+Products(pp).angle,1,X,Y);
    xyz = cat(2,Xout(:), Yout(:), Z(:));
end

[P, ~, R, IC] = intrinsicsExtrinsics2P(intrinsics_CIRN, localExtrinsics);

% Find the Undistorted UV Coordinates atributed to each xyz point.
UV = P*[xyz'; ones(1,size(xyz,1))];
UV = UV./repmat(UV(3,:),3,1);  % Make Homogenenous

% So the camera image we are going to pull pixel values from is distorted.
% Our P matrix transformation assumes no distortion. We have to correct for
% this. So we distort our undistorted UV coordinates to pull the correct
% pixel values from the distorted image. Flag highlights invalid points
% (=0) using intrinsic criteria.
[~,~,flag] = distortUV(UV(1,:),UV(2,:),intrinsics_CIRN);

% Find Negative Zc Camera Coordinates. Adds invalid point to flag (=0).
xyzC = R*IC*[xyz'; ones(1,size(xyz,1))];
bind= xyzC (3,:)<=0;
flag(bind)=0;

% Make into a singular matrix for use in the non-linear solver
UVd = [UV(1,:)' UV(2,:)'];
%UVd = [Ud; Vd];


%UVd = reshape(UVd,[],2);
s=size(X);
Ud=(reshape(UVd(:,1),s(1),s(2)));
Vd=(reshape(UVd(:,2),s(1),s(2)));

% Round UVd coordinates so it cooresponds to matrix indicies in image I
Ud=round(Ud);
Vd=round(Vd);

% Utalize Flag to remove invalid points. See xyzDistUV and distortUV to see
% what is considered an invalid point.
Ud(flag==0)=nan;
Vd(flag==0)=nan;

% dimension for rgb values.
ir=nan(s(1),s(2),3);

% Pull rgb pixel intensities for each point in XYZ
for kk=1:s(1)
    for j=1:s(2)
        % Make sure not a bad coordinate
        if isnan(Ud(kk,j))==0 & isnan(Vd(kk,j))==0
            % Note how Matlab organizes images, V coordinate corresponds to
            % rows, U to columns. V is 1 at top of matrix, and grows as it
            % goes down. U is 1 at left side of matrix and grows from left
            % to right.
            ir(kk,j,:)=I(Vd(kk,j),Ud(kk,j),:);
        end
    end
end

% Save Rectifications from Each Camera into A Matrix
IrIndv=uint8(ir);

end

function [xyz, Xout, Yout, Z] = getCoords(Products, pp, extrinsics)

[y2,x2, ~] = ll_to_utm(Products(pp).lat, Products(pp).lon);
localExtrinsics = localTransformExtrinsics([x2 y2], Products(pp).angle-270, 1, extrinsics);


if contains(Products(pp).type, 'Grid')
    if Products(pp).xlim(1) < 0; Products(pp).xlim(1) = -Products(pp).xlim(1); end
    ixlim = x2 - Products(pp).xlim;

    if Products(pp).ylim(1) > 0; Products(pp).ylim(1) = -Products(pp).ylim(1); end
    if Products(pp).ylim(2) < 0; Products(pp).ylim(2) = -Products(pp).ylim(2); end
    iylim = y2 + Products(pp).ylim;

    [iX, iY]=meshgrid(ixlim(1):Products(pp).dx:ixlim(2),iylim(1):Products(pp).dy:iylim(2));

    % DEM stuff
    if isempty(Products(pp).z); iz=0; else; iz = Products(pp).z; end
    iZ=iX*0+iz;

    X=iX; Y=iY; Z=iZ;
    [Xout, Yout]=localTransformEquiGrid([x2 y2], Products(pp).angle-270,1,iX,iY);
    Z=Xout.*0+iz;

    xyz = [Xout(:) Yout(:) Z(:)];


elseif contains(Products(pp).type, 'xTransect')
    if Products(pp).xlim(1) < 0; Products(pp).xlim(1) = -Products(pp).xlim(1); end
    ixlim = x2 - Products(pp).xlim;
    iy = y2 + Products(pp).y;

    X = [ixlim(1):Products(pp).dx:ixlim(2)]';
    Y = X.*0+iy;
    if isempty(Products(pp).z); iz=0; else; iz = Products(pp).z; end
    Z = X.*0 + iz;
    %Xout=X-x2;
    %Yout=Y-y2;
    [ Xout, Yout]= localTransformPoints([x2 y2], Products(pp).angle-270,1,X,Y);
    xyz = cat(2,Xout(:), Yout(:), Z(:));
elseif contains(Products(pp).type, 'yTransect')
    if Products(pp).ylim(1) > 0; Products(pp).ylim(1) = -Products(pp).ylim(1); end
    if Products(pp).ylim(2) < 0; Products(pp).ylim(2) = -Products(pp).ylim(2); end
    iylim = y2 + Products(pp).ylim;

    ix = x2 + Products(pp).x;

    Y = [iylim(1):Products(pp).dy:iylim(2)]';
    X = Y.*0+ix;
    if isempty(Products(pp).z); iz=0; else; iz = Products(pp).z; end
    Z = Y.*0 + iz;
    [ Xout, Yout]= localTransformPoints([x2 y2],Products(pp).angle-270,1,X,Y);
    xyz = cat(2,Xout(:), Yout(:), Z(:));
end
xyz = xyz+[x2 y2 0];

end
