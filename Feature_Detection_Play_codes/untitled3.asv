%uiopen('/Users/athinalange/Desktop/DATA/Work/UAV_rectification/Athina_Automated_rectification/DATA/20211026_Torrey/01/Processed_data/undistortImage.png',1)
[m,n,c] = size(undistortImage); % image dimensions for edge coordinates

load('/Users/athinalange/Desktop/DATA/Work/UAV_rectification/Athina_Automated_rectification/DATA/20211026_Torrey/input_data.mat', 'origin_grid')
load('/Users/athinalange/Desktop/DATA/Work/UAV_rectification/Athina_Automated_rectification/DATA/20211026_Torrey/01/Processed_data/Inital_coordinates.mat', 'extrinsicsInitialGuess')
[y2,x2, ~] = ll_to_utm(origin_grid(1), origin_grid(2));

if floor(log10(extrinsicsInitialGuess(1))) > 4  % if in lat/lon or UTM dimensions
    extrinsicsInitialGuess(1) = x2 - extrinsicsInitialGuess(1);
    extrinsicsInitialGuess(2) = -(y2 - extrinsicsInitialGuess(2));
end
extrinsicsInitialGuess(4:6)=rad2deg(extrinsicsInitialGuess(4:6))
%% 
%ee=[-102 -10 65 -90-19 90+25 0] % pitch(5): 0 is straight up, 180 is nadir
%ee=[100 -10 65 0+0 180+0 0] % pitch(5): 0 is straight up, 180 is nadir
% x is cross-shore direction (+x is offshore)
% y is alongshore direction (+y is South - rotation switches for east/west coast)
% z is elevation (+z is up)
camera_point = [-100 10 65]


% if rad2deg(ee(4)) > 180 % West Coast
%     camera_angle = [180-ee(5) ee(6) -ee(4)]
% else % East Coast
%    camera_angle = [180-ee(5) ee(6) ee(4)]
% end 
%% 
camera_angle = [90 90-19 20]
R = eul2rotm(deg2rad(camera_angle), 'XYX');


%%
iP = world2img([0 0 0], tform, cameraParams_undistorted.Intrinsics )
% i_camera_bound = [0 0; ...
%                              n 0; ...
%                              n m; ...
%                              0 m;...
%                              0 400; ...
%                              n 400;...
%                              n/2 m/2; ...
%                              2000 1800;]';%...
%            %                  2000 3000]';
%
i_camera_bound = [0 0; ...
                             0 n; ...
                             m n; ...
                             m 0;...
                             m/2 n/2]';%...
           %                  2000 3000]';
%

% get camera projection bounds
UV =  i_camera_bound';


tform = (rigidtform3d(R,camera_point));
%[u,v,w] = transformPointsInverse(tform,UV)

iW = img2world2d(UV, tform, cameraParams_undistorted.Intrinsics)
%%
% tform2 = transltform3d(camera_point);
% [xx,yy]=transformPointsForward(tform2, iW(:,1), iW(:,2), zeros(length(iW),1))
% %[iX,iY]=meshgrid([min(iW([1 4],1)):1:max(iW(2:3,1))],[min(iW(3:4,2)):1:max(iW(1:2,2))]);
% %[iX,iY] = meshgrid([-500:1:2000], [-500:1:500]);
% %[Ir]= imageRectifier(undistortImage, intrinsics, extrinsicsInitialGuess, iX, iY, zeros(size(iX,1), size(iX,2)),0);
% 
% %P=cameraProjection(cameraParams_undistorted.Intrinsics, tform)
% % 
% % tform.Translation(3)=-tform.Translation(3);
% knownDim = 'z'
% P = cameraProjection(cameraParams_undistorted.Intrinsics, tform)
% U = UV(:,1);
% V = UV(:,2);
% knownVal = zeros(size(U,1), size(U,2));
%% DLT
% We will find the world coordinates atributed to each UV point using the
% Direct Linear Transformation Equations.
%       U = (Ax + By + Cz + D)/(Ex + Fy + Gz + 1);
%       V = (Hx + Jy + Kz + L)/(Ex + Fy + Gz + 1);
% These Coefficients are Moved around to solve for U and V depending on the
% known value.

% Convert P to DLT Coefficients
A = P(1,1);
B = P(1,2);
C = P(1,3);
D = P(1,4);
E = P(3,1);
F = P(3,2);
G = P(3,3);
H = P(2,1);
J = P(2,2);
K = P(2,3);
L = P(2,4);

% Convert Coefficients to Rearranged Combined Coefficients For Solution
M = (E*U - A);
N = (F*U - B);
O = (G*U - C);
P = (D - U);
Q = (E*V - H);
Rr = (F*V - J);
S = (G*V - K);
T = (L - V);

% Section 3: Solve for XYZ Depending on Known Variable
% If the x coordinate is known
if strcmp(knownDim,'x')==1
    X =  knownVal;
    Y = ((O.*Q - S.*M).*X + (S.*P - O.*T))./(S.*N - O.*Rr);
    Z = ((N.*Q - Rr.*M).*X + (Rr.*P - N.*T))./(Rr.*O - N.*S);
end

% If the y coordinate is known
if strcmp(knownDim,'y')==1
    Y =  knownVal;
    X = ((O.*Rr - S.*N).*Y + (S.*P - O.*T))./(S.*M - O.*Q);
    Z = ((M.*Rr - Q.*N).*Y + (Q.*P - M.*T))./(Q.*O - M.*S);
end

% If the z coordinate is known
if strcmp(knownDim,'z')==1
    Z =  knownVal;
    X = ((N.*S - Rr.*O).*Z + (Rr.*P - N.*T))./(Rr.*M - N.*Q);
    Y = ((M.*S - Q.*O).*Z + (Q.*P - M.*T))./(Q.*N - M.*Rr);
end
% Reformat into one Matrix
xyz = [X' Y' Z'];
%%
ee=extrinsicsInitialGuess;
ee(2)=extrinsicsInitialGuess(1);
ee(1)=extrinsicsInitialGuess(2);
yaw=289
pitch = 20;
% [UVd,flag] = xyz2DistUV(intrinsics,[-10, -100, 70, yaw, pitch, 0], world_point'); world_UV = reshape(UVd,2,[]);
%
[xyz] = distUV2XYZ(intrinsics,ee ,[camera_bound; world_UV]','z',[0 0 0 0 0 0 0])

[x,y]=meshgrid([1:3840], [1:2160]);
%[xyz_image] = distUV2XYZ(intrinsics,[-10, -100, 70, yaw, pitch, 0],[x(:) y(:)]','z', zeros(1, size(x(:),1)));
[xyz_image] = distUV2XYZ(intrinsics,ee,[x(:) y(:)]','z', zeros(1, size(x(:),1)));
% Euler pitch (degrees CCW to nadir)
camera_point = [-10 -100 70]
camera_angle = [-180-90+pitch 0 270-yaw] % the smaller the additional value, the closer to nadir
R = eul2rotm(deg2rad(camera_angle), 'XYZ');
[iX,iY]=meshgrid([min(xyz([1 4],1)):1:max(xyz(2:3,1))],[min(xyz(3:4,2)):1:max(xyz(1:2,2))]);
[Ir]= imageRectifier(undistortImage,intrinsics,[-10, -100, 70, yaw, pitch, 0],iX,iY,zeros(size(iX,1), size(iX,2)),0);


clf
subplot(121)
plotCamera(Size=5,Orientation = R, Location = camera_point)
hold on
image(iX(:),iY(:),Ir)
scatter3(xyz(:,1), xyz(:,2), 0, 200, colors(1:7,:), 'filled')
patch(xyz(1:4,1), xyz(1:4,2), 'r', 'FaceColor', 'none')
scatter3(world_point(1,:), world_point(2,:), world_point(3,:),300, colors(6:7,:))
%scatter3(xyz_image(:,1), xyz_image(:,2), xyz_image(:,3), 20, 'r')

xlabel('x ->'); ylabel('y ->'); zlabel('z ->')
set(gca, 'FontSize', 20)
ylim([-50 350])
xlim([-200 200])
grid on
%axis equal
subplot(122)
image(x_image, y_image, undistortImage)
hold on
scatter(camera_bound(:,1), camera_bound(:,2), 100, colors(1:5,:), 'filled')

patch(camera_bound(1:4,1), camera_bound(1:4,2), 'r', 'FaceColor', 'none')
scatter(world_UV(:,1), world_UV(:,2),100, colors(6:7,:), 'filled')
xlabel('x ->'); ylabel('<- y')
set(gca, 'YDir', 'reverse')
axis equal
xlim([-1 3841])
ylim([-1 2160])


%%
[w_camera_bound] = distUV2XYZ(intrinsics, extrinsicsInitialGuess, i_camera_bound,'z', zeros(1,size(i_camera_bound,2)))
 
% [i_x,i_y]=meshgrid([1:n], [1:m]); % all pixel coordinates in image
% [w_image] = distUV2XYZ(intrinsics, extrinsicsInitialGuess,[i_x(:) i_y(:)]','z', zeros(1, size(i_x(:),1))); % all pixel coordinates in world


% [iX,iY]=meshgrid([min(w_camera_bound([1 4],1)):1:max(w_camera_bound(2:3,1))],[min(w_camera_bound(3:4,2)):1:max(w_camera_bound(1:2,2))]);
% [Ir]= imageRectifier(undistortImage, intrinsics, extrinsicsInitialGuess, iX, iY, zeros(size(iX,1), size(iX,2)),0);

% from extrinsicsInitialGuess get real world coordinates of camera projection in real world 
% extract LiDAR/SfM survey only within those dimensions.
%%
%get_local_survey
Points = pc.Location;
if ~isempty(pc.Color)
    cPoints = pc.Color;
    if contains(class(cPoints), 'uint16')
        cPoints = double(cPoints) / 65535;
    end
else
    cPoints = Points(:,3);
end

[y2,x2, ~] = ll_to_utm(origin_grid(1), origin_grid(2));

Points(:,1) = x2 - Points(:,1);
Points(:,2) = -(y2 - Points(:,2));

[in,on] = inpolygon(Points(:,2), Points(:,1),w_camera_bound(:,1), w_camera_bound(:,2));
Points = Points(in,:);
cPoints = cPoints(in,:);

pc_new = select(pc, in);
%% plot


clf
subplot(121)

plotCamera('Size',5, 'AbsolutePose', rigidtform3d(R,camera_point))
hold on
grid on
plot3([camera_point(1) camera_point(1)], [camera_point(2)-10 camera_point(2)+10], [camera_point(3) camera_point(3)], 'k', 'LineWidth', 3)
plot3([camera_point(1)-10 camera_point(1)+10], [camera_point(2) camera_point(2)], [camera_point(3) camera_point(3)], 'g', 'LineWidth', 3)
plot3([camera_point(1) camera_point(1)], [camera_point(2) camera_point(2)], [camera_point(3)-10 camera_point(3)+10], 'b', 'LineWidth', 3)
xlabel('<- Beach   x   Offshore ->'); ylabel(['<- South   y   North ->']); zlabel('z ->')


legend('z', 'x', 'y')
    view(270,90)

%%
scatter3(iW(:,1), iW(:,2), 0, 50, colors(1:length(UV),:), 'filled')
patch(iW(1:4,1), iW(1:4,2), 'k', 'FaceColor', 'none', 'LineWidth', 3)

%scatter3(X,Y,Z, 50, colors(1:length(UV),:))
%patch(X(1:4), Y(1:4), 'k', 'FaceColor', 'none')
%scatter3(xx,yy, 0, 50, colors(1:length(UV),:), 'filled')
%patch(xx(1:4), yy(1:4), 'k', 'FaceColor', 'none', 'LineWidth', 3)
%image(iY(:),iX(:),Ir)
%scatter3(w_camera_bound(:,1), w_camera_bound(:,2), w_camera_bound(:,3), 100, colors(1:4,:), 'filled')
%patch(w_camera_bound(:,1), w_camera_bound(:,2), 'k', 'FaceColor', 'none', 'LineWidth', 3)
%scatter3(world_point(1,:), world_point(2,:), world_point(3,:),300, colors(6:7,:))
%scatter3(w_image(:,1), w_image(:,2),w_image(:,3), 20, 'r')
xlabel('<- Beach   x   Offshore ->'); ylabel(['<- South   y   North ->']); zlabel('z ->')
set(gca, 'FontSize', 20)
%if ee(4) > 180 % West Coast
%set(gca, 'YDir', 'reverse')
    view(270,90)
%end
xlim([-500 550])
ylim([-400 400])
grid on
%axis equal


subplot(122)
image(i_x(:),i_y(:), undistortImage)
hold on
%scatter(i_camera_bound(1,:), i_camera_bound(2,:), 100, colors(1:4,:), 'filled')
%scatter(UVd(:,1), UVd(:,2), 100, colors(1:4,:), 'filled')
scatter(UV(:,2), UV(:,1), 100, colors(1:length(UV),:), 'filled')

%patch(i_camera_bound(1,:), i_camera_bound(2,:), 'r', 'FaceColor', 'none')
%scatter(world_UV(:,1), world_UV(:,2),100, colors(6:7,:), 'filled')
xlabel('x ->'); ylabel('<- y')
axis equal
xlim([-1 n+1])
ylim([-1 m+1])